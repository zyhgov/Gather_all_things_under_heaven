<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WISDOM - 联合库UNHub & 通义千问Qwen</title>
  <!-- 网站图标 -->
  <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" href="wisdom.svg" type="image/svg+xml">
  <meta name="description" content="联合库UNHub与通义千问Qwen MAX大模型强强联合，推出WISDOM文殊大模型，提供高效、精准、智能化解决方案。探索复杂问题解析、多语言支持及专业领域咨询的强大功能。">
  <meta name="keywords" content="WISDOM, UNHub, 通义千问, Qwen MAX, 智能化解决方案, 自然语言处理, 知识图谱, 机器学习, 复杂问题解析, 多语言支持, 专业领域咨询">
  <!-- 引入 Tailwind CSS -->
  <link rel="stylesheet" href="/info/tailwind.min.css">
  <link href="https://fonts.cdnfonts.com/css/jetbrains-mono-2" rel="stylesheet">
  <link rel="stylesheet" href="ai.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  <!-- 添加DNS预连接 -->
   <!-- 在<head>中添加媒体查询 -->
<style>

  </style>
<link rel="preconnect" href="https://dashscope.aliyuncs.com">
<link rel="dns-prefetch" href="https://dashscope.aliyuncs.com">
  <script type="text/javascript">
      (function(c,l,a,r,i,t,y){
          c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};
          t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;
          y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);
      })(window, document, "clarity", "script", "pnjcz18od3");
  </script>
  <!-- 自定义字体 -->
  <style>

  </style>
</head>
<body class="bg-gray-100 flex h-screen overflow-hidden">
  <!-- 页面说明弹窗 -->
<div id="intro-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
  <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4">
    <!-- 关闭按钮 -->
    <button id="close-intro" class="absolute -top-4 -right-4 bg-gray-500 hover:bg-gray-600 rounded-full w-8 h-8 flex items-center justify-center transition-colors">
      <span class="absolute w-4 h-0.5 bg-white transform rotate-45"></span>
      <span class="absolute w-4 h-0.5 bg-white transform -rotate-45"></span>
    </button>
    
    <!-- 弹窗内容 -->
    <div class="p-8 overflow-y-auto max-h-[80vh]">
      <img src="deepseek r1.svg" alt="系统说明" class="w-32 mx-auto mb-6">
      <h2 class="text-2xl font-bold text-center mb-4">WISDOM 使用说明</h2>
      <div class="space-y-4 text-gray-600">
        <p>1. 本平台基于DeepSeek R1模型构建，提供智能问答服务</p>
        <p>2. 支持多轮对话上下文理解，可随时开启新对话</p>
        <p>3. 点击示例问题快速体验核心功能</p>
        <p>4. 生成内容需人工审核，重要决策请二次验证</p>
        <div class="bg-blue-50 p-4 rounded-lg">
          <p class="text-blue-600">⚠️ 注意事项：</p>
          <ul class="list-disc pl-6 mt-2">
            <li>请勿输入敏感个人信息</li>
            <li>复杂问题建议分步提问</li>
            <li>技术问题优先提供代码片段</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- 在<aside>标签前添加移动端导航栏 -->
  <div id="mobile-navbar" class="hidden fixed top-0 left-0 right-0 bg-white z-50 border-b border-gray-200">
    <div class="flex items-center justify-between px-4 py-2">
      <!-- 侧边栏按钮 -->
      <button id="mobile-sidebar-toggle" class="text-gray-500 hover:text-gray-700">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h10"/>
        </svg>
      </button>
      
      <!-- 中央Logo -->
      <!-- 带原生属性的完整写法 -->
      <img src="deepseek r1.svg" alt="Logo" class="mx-auto max-w-full h-auto" width="50%" height="50%">
      
      <!-- 空占位符保持对齐 -->
      <span class="w-6"></span>
    </div>
  </div>
  <!-- 左侧侧边栏 -->
  <aside id="sidebar" class="bg-white w-0 sm:w-20 md:w-64 border-r border-gray-200 flex flex-col transition-all duration-300">
    <!-- 顶部 Logo 和折叠按钮 -->
    <div class="flex items-center justify-between p-4 border-b border-gray-200">
      <img id="cebian_logo" src="wisdom_heng.png" alt="Logo" class="w-15 h-8">
      <button id="toggle-sidebar" class="text-gray-500 hover:text-gray-700">
        <img id="sidebar-toggle-icon" src="收起侧边栏.svg" alt="Toggle Sidebar" class="w-6 h-6">
      </button>
    </div>

  <!-- 对话历史记录列表 -->
  <div id="conversation-list" class="flex-1 overflow-y-auto p-4">
    <div class="flex items-center space-x-2 mb-4">
      <button id="new-conversation" class="text-blue-500 hover:text-blue-700">♾️ 开启新对话</button>
    </div>
    <div class="mb-4">
      <button id="clear-cache" class="text-red-500 hover:text-red-700">🚯 清除缓存并重置</button>
    </div>
    <div class="mb-4">
      <button id="go-home" class="text-green-500 hover:text-green-700">🏠 回到联合库UNHub主页</button>
    </div>
    <ul id="conversations">
      <!-- 动态生成对话列表 -->
    </ul>
  </div>

    <!-- 版本信息 -->
    <div id="version_di" class="p-4 border-t border-gray-200 text-xs text-gray-500">
      <img src="/asset/icon_logo/hei_by_y_1.png" alt="unhub" class="w-8 h-8 mb-1">
      <span style="color: #007AFF;">Beta Version</span><br>联合库UNHub 版权所有<br>info@zyhorg.cn
    </div>
  </aside>

  <!-- 右侧主内容区域 -->
  <main class="flex-1 flex flex-col overflow-hidden bg-white relative">
    <!-- 聊天窗口 -->
    <div id="chat-box" class="flex-1 overflow-y-auto p-6 bg-white relative mx-6">
      <!-- 欢迎区域 -->
      <div id="welcome-area" class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center">
        <img src="deepseek r1.svg" id="zhu_logo" alt="Logo" class="w-200 h-20 mx-auto mb-4">
        <div id="title-container" class="relative">
          <h1 id="dynamic-title" class="mb-4 text-4xl font-bold text-gray-800 mb-2 opacity-0 transition-opacity duration-500"></h1>
        </div>
        <p id="js" class="text-gray-600 mb-4 text-xl">
          WISDOM 文殊大模型是联合库UNHub和杖雍皓联合推出的深度融合智能体平台。平台基于阿里云百炼的DeepSeek V3和R1模型，依托GitHub平台，覆盖教学、科研及生活等全场景。此平台目前在内测阶段，无需登录即可对话。
        </p>
        <div class="space-y-2">
          <button id="but" class="example-question bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">你能做什么?</button>
          <button id="but" class="example-question bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600">用python打印九九乘法表</button>
          <button id="but" class="example-question bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">苏格拉底式提问方法是什么意思？</button>
        </div>
      </div>
      <!-- 消息气泡将动态插入到这里 -->
    </div>

    <!-- 输入区域 -->
    <div class="p-4 bg-white border-t border-gray-200">
      <div class="flex items-center">
        <textarea id="user-input" placeholder="在这里键入你要询问的信息..." class="flex-1 p-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500 resize-none text-xl"></textarea>
        <button id="send-btn" class="ml-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">键入</button>
      </div>
      <p class="text-center">WISDOM文殊是一个预览模型，仍在更新中。</p>
    </div>
  </main>

  <!-- 引入 marked.js -->
   <script src="lod.js"></script>
  <script src="script.js"></script>
  <script src="marked.min.js"></script>
  
</body>
</html>  // 页面加载完成后显示弹窗
  window.addEventListener('load', () => {
    const modal = document.getElementById('intro-modal');
    const closeBtn = document.getElementById('close-intro');
    
    // 显示弹窗
    modal.classList.remove('hidden');
    
    // 关闭事件
    closeBtn.addEventListener('click', () => {
      modal.classList.add('hidden');
    });

    // 点击背景关闭
    modal.addEventListener('click', (e) => {
      if(e.target === modal) {
        modal.classList.add('hidden');
      }
    });
  });

// 在<script>中添加移动端适配逻辑
document.getElementById('mobile-sidebar-toggle').addEventListener('click', () => {
    document.body.classList.toggle('sidebar-open');
  });
  
  // 原有侧边栏切换逻辑修改
  document.getElementById('toggle-sidebar').addEventListener('click', () => {
    document.body.classList.toggle('sidebar-open');
  });
@font-face {
    font-family: 'PingFang';
    src: url('/font/sf-pro-display_bold.woff2') format('truetype'),
         url('/font/PingFangSC-Medium.woff2') format('woff2');
    font-style: normal;
  }
  body {
    font-family: 'PingFang', sans-serif;
  }
  #user-input, #but ,#new-conversation,#version_di,#clear-cache,#go-home{
    font-family: 'PingFang', sans-serif; /* 确保输入框使用自定义字体 */
  }
  .custom-font-size {
  font-size: 20px; /* 设置为你想要的字体大小 */
}
  /* 确保消息气泡宽度占满父容器 */
  .message-content {
  max-width: 100%;
  word-break: break-word; /* 自动换行 */
}
  @media (max-width: 768px) {
    /* 移动端侧边栏隐藏时的主内容区域补白 */
    main {
      margin-left: 0 !important;
      transition: margin-left 0.3s;
    }
    
    /* 展示移动端顶部导航栏 */
    #mobile-navbar {
      display: flex !important;
    }
    
    /* 侧边栏展开时的主内容区域偏移 */
    body.sidebar-open main {
      margin-left: 200px;
    }
  }
  /* 添加到样式表 */
body.sidebar-open {
  overflow-x: hidden;
}

#sidebar {
  position: fixed !important;
  top: 0;
  left: 0;
  height: 100vh;
  transition: transform 0.3s;
}

body.sidebar-open #sidebar {
  transform: translateX(0);
}

@media (min-width: 769px) {
  #sidebar {
    transform: translateX(0) !important;
  }
}  @media (max-width: 768px) {
  /* 移动端侧边栏隐藏时的主内容区域补白 */
  main {
    margin-left: 0 !important;
    transition: margin-left 0.3s;
  }
  
  /* 展示移动端顶部导航栏 */
  #mobile-navbar {
    display: flex !important;
  }
  
  /* 侧边栏展开时的主内容区域偏移 */
  body.sidebar-open main {
    margin-left: 200px;
  }
}
/* 添加到样式表 */
body.sidebar-open {
overflow-x: hidden;
}

#sidebar {
position: fixed !important;
top: 0;
left: 0;
height: 100vh;
transition: transform 0.3s;
}

body.sidebar-open #sidebar {
transform: translateX(0);
}

@media (min-width: 769px) {
#sidebar {
  transform: translateX(0) !important;
}
}
  /* 公式样式 */
  .formula {
  font-family: 'JetBrains Mono', sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  padding: 20px;
  margin: 1rem 0;
  border-radius: 0.5rem;
  white-space: nowrap; /* 禁止自动换行 */
  overflow-x: auto; /* 横向滚动条 */
  border-radius: 10px;
}

/* 代码块样式 */
pre {
  font-family: 'JetBrains Mono', sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  max-width: 100%;
  overflow-x: auto; /* 横向滚动条 */
  margin: 10px 10px 10px 10px;
  background-color: gainsboro;
  border-radius: 20px;
}

code {
  font-family: 'JetBrains Mono', sans-serif;
  font-size: 1rem;
  line-height: 1.5;
  margin: 10px 10px 10px 10px;
  border-radius: 10px;
}/* 限制标题宽度并启用省略号 */
#conversations span {
  white-space: nowrap; /* 禁止换行 */
  overflow: hidden; /* 超出部分隐藏 */
  text-overflow: ellipsis; /* 显示省略号 */
  max-width: 150px; /* 最大宽度，根据实际布局调整 */
}
/* 淡入淡出动画 */
#dynamic-title {
opacity: 0; /* 初始状态为透明 */
transition: opacity 0.5s ease-in-out; /* 平滑过渡效果 */
}

#dynamic-title.visible {
opacity: 1; /* 显示状态 */
}
/* 弹窗动画 */
#intro-modal {
  animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* 响应式调整 */
@media (max-width: 640px) {
  #intro-modal .max-w-2xl {
    max-width: 95%;
    margin: 0 10px;
  }
  
  #intro-modal .p-8 {
    padding: 1.5rem;
  }
  
  #close-intro {
    right: 0;
    top: 0;
    background: rgba(0,0,0,0.7);
  }
}
.animate-message {
  animation: messageAppear 0.3s ease-out;
}

@keyframes messageAppear {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
/* 关闭按钮样式 */
#close-intro span {
  display: block;
  position: absolute;
  background: white;
  transition: all 0.3s ease;
}

#close-intro span:first-child {
  transform: rotate(45deg);
}

#close-intro span:last-child {
  transform: rotate(-45deg);
}

#close-intro:hover span {
  background: #eee;
}

/* From Uiverse.io by G4b413l */ 
.three-body {
--uib-size: 35px;
--uib-speed: 0.8s;
--uib-color: #5D3FD3;
position: relative;
display: inline-block;
height: var(--uib-size);
width: var(--uib-size);
animation: spin78236 calc(var(--uib-speed) * 2.5) infinite linear;
}

.three-body__dot {
position: absolute;
height: 100%;
width: 30%;
animation: pulse 1.2s infinite ease-in-out;
backface-visibility: hidden;
}

.three-body__dot:after {
content: '';
position: absolute;
height: 0%;
width: 100%;
padding-bottom: 100%;
background-color: var(--uib-color);
border-radius: 50%;
}

.three-body__dot:nth-child(1) {
bottom: 5%;
left: 0;
transform: rotate(60deg);
transform-origin: 50% 85%;
}

.three-body__dot:nth-child(1)::after {
bottom: 0;
left: 0;
animation: wobble1 var(--uib-speed) infinite ease-in-out;
animation-delay: calc(var(--uib-speed) * -0.3);
}

.three-body__dot:nth-child(2) {
bottom: 5%;
right: 0;
transform: rotate(-60deg);
transform-origin: 50% 85%;
}

.three-body__dot:nth-child(2)::after {
bottom: 0;
left: 0;
animation: wobble1 var(--uib-speed) infinite
  calc(var(--uib-speed) * -0.15) ease-in-out;
}

.three-body__dot:nth-child(3) {
bottom: -5%;
left: 0;
transform: translateX(116.666%);
}

.three-body__dot:nth-child(3)::after {
top: 0;
left: 0;
animation: wobble2 var(--uib-speed) infinite ease-in-out;
}

@keyframes spin78236 {
0% {
transform: rotate(0deg);
}

100% {
transform: rotate(360deg);
}
}

@keyframes wobble1 {
0%,
100% {
transform: translateY(0%) scale(1);
opacity: 1;
}

50% {
transform: translateY(-66%) scale(0.65);
opacity: 0.8;
}
}

@keyframes wobble2 {
0%,
100% {
transform: translateY(0%) scale(1);
opacity: 1;
}

50% {
transform: translateY(66%) scale(0.65);
opacity: 0.8;
}
}

@media screen and (max-width: 680px) {
#cebian_logo{
  content: url('wisdom.svg');
}
#zhu_logo{
  content: url('/asset/icon_logo/hei_by_y_1.png');
}
#js{
  font-size: 0.8em;
}
}
/* 确保思考状态指示器正确显示 */
.thinking-status {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 8px;
}

.three-body {
  --uib-size: 18px;
  --uib-color: var(--ios-blue);
}
/**************** 苹果设计系统变量 ****************/
:root {
  --ios-blue: #007AFF;
  --ios-gray-1: #F5F5F7;
  --ios-gray-2: #E5E5EA;
  --ios-label: #1D1D1F;
  --ios-secondary: #86868B;
  --ios-surface: rgba(255, 255, 255, 0.8);
  --ios-blur: saturate(180%) blur(20px);
}

/**************** 消息基础架构 ****************/
.message {
  margin: 1.25rem 0;
  opacity: 0;
  animation: iosEntry 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  will-change: transform;
  transform: translateZ(0);
}

@keyframes iosEntry {
  0% {
    opacity: 0;
    transform: translateY(12px) scale(0.97);
  }
  100% {
    opacity: 1;
    transform: none;
  }
}

/**************** 消息容器设计 ****************/
.message-content {
  position: relative;
  padding: 1rem 1.25rem;
  border-radius: 18px;
  background: var(--ios-surface);
  backdrop-filter: var(--ios-blur);
  box-shadow: 
    0 1px 1px rgba(0, 0, 0, 0.04),
    0 4px 8px rgba(0, 0, 0, 0.04),
    inset 0 -0.5px 0.5px rgba(255, 255, 255, 0.5);
  transition: all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
  background-color: rgba(249, 249, 249);
  font-size: 1em;
}

.message-content:hover {
  transform: translateY(-1px);
  box-shadow: 
    0 2px 2px rgba(0, 0, 0, 0.04),
    0 8px 16px rgba(0, 0, 0, 0.06),
    inset 0 -0.5px 0.5px rgba(255, 255, 255, 0.6);
}

/**************** 思考消息专属样式 ****************/
/* 思考过程样式 */
.message.thinking {
  /* 主容器优化 */
  background: rgba(245, 245, 247, 0.712);
  border: 0.5px solid rgba(0, 0, 0, 0.06);
  border-radius: 18px 18px 4px 4px; /* 右下角保持小圆角增加设计细节 */
  color: #68686D; /* Apple 标准辅助灰色 */
  margin: 1px 0;
  overflow: hidden; /* 确保内部圆角生效 */
  padding: 15px;
  font-size: 1em;
  /* 三维层次 */
  box-shadow: 
    0 1px 1px rgba(0, 0, 0, 0.02),
    0 2px 4px rgba(0, 0, 0, 0.04),
    inset 0 0.5px 0.5px rgba(255, 255, 255, 0.6);
}
.message.thinking .message-content {
  /* 内容容器间距系统 */
  padding: 16px 20px 20px; /* 上 16px 左右 20px 下 20px */
}

.message.thinking .message-header {
  color: #007AFF;
}

.message.thinking .message-body {
  color: #6E6E73;
  
}

/**************** 最终回答样式 ****************/
.message.bot {
  /* 主容器优化 */
  background: rgba(255, 255, 255, 0.85);
  border: 0.5px solid rgba(0, 0, 0, 0.06);
  border-radius: 4px 4px 18px 18px; /* 右下角保持小圆角增加设计细节 */
  color: #1e1e1f; /* Apple 标准辅助灰色 */
  margin: 1px 0;
  overflow: hidden; /* 确保内部圆角生效 */
  padding: 15px;
  font-size: 1em;
  
  /* 三维层次 */
  box-shadow: 
    0 1px 1px rgba(0, 0, 0, 0.02),
    0 2px 4px rgba(0, 0, 0, 0.04),
    inset 0 0.5px 0.5px rgba(255, 255, 255, 0.6);
}

.message.bot .message-header {
  color: #1C1C1E;
}

.message.bot .message-body {
  color: #2C2C2E;
  
}
/**************** 增强对比度的辅助样式 ****************/
.message.thinking .message-content:hover {
  transform: translateY(-1px) scale(1.005);
  box-shadow: 
    0 2px 3px rgba(0, 0, 0, 0.04),
    0 10px 16px rgba(0, 0, 0, 0.05),
    inset 0 -0.5px 0.5px rgba(255, 255, 255, 0.7);
}

.message.bot .message-content:hover {
  transform: translateY(-1px) scale(1.01);
  box-shadow: 
    0 3px 4px rgba(0, 0, 0, 0.05),
    0 12px 20px rgba(0, 0, 0, 0.06),
    inset 0 -0.5px 0.5px rgba(255, 255, 255, 0.8);
}
/**************** 状态指示器强化 ****************/
.thinking-status {
  color: #8A8A8E; /* 更柔和的状态文字 */
}

.thinking-status::before {
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23007AFF"><path d="M12 2A10 10 0 1 0 22 12 10 10 0 0 0 12 2zm0 18a8 8 0 1 1 8-8 8 8 0 0 1-8 8z"/><path d="M12 7a1 1 0 0 1 1 1v4a1 1 0 0 1-2 0V8a1 1 0 0 1 1-1zm0 8a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/></svg>');
}
/**************** 内容排版系统 ****************/
.message-body {
  color: var(--ios-label);
  line-height: 1.7;
  font-size: 1em;
  padding: 0.75rem 0;
}

.message-body p {
  margin: 0.8em 0;
  letter-spacing: -0.08px;
}

.message-body pre {
  background: rgba(0, 0, 0, 0.85) !important;
  padding: 1.1rem !important;
  border-radius: 12px !important;
  margin: 1.2rem 0 !important;
  font-family: 'SF Mono', Menlo, monospace;
  font-size: 0.9em;
  color: #fff;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.message-body code:not(pre code) {
  background: rgba(0, 122, 255, 0.12);
  color: var(--ios-blue);
  padding: 0.2em 0.4em;
  border-radius: 5px;
  font-size: 0.9em;
}

.message-body blockquote {
  border-left: 3px solid var(--ios-gray-2);
  padding-left: 1rem;
  margin: 1.2rem 0;
  color: var(--ios-secondary);
}

/**************** 加载状态动效 ****************/
.three-body {
  --uib-size: 24px;
  --uib-color: var(--ios-blue);
  --uib-speed: 1.4s;
}

.loading-indicator {
  padding: 12px;
  background: rgba(0, 122, 255, 0.08);
  border-radius: 10px;
  display: inline-flex;
  align-items: center;
  gap: 10px;
}

/**************** 移动端优化 ****************/
@media (max-width: 768px) {
  .message.thinking .message-content {
    background: rgba(240, 240, 245, 0.75);
  }
  
  .message.bot .message-content {
    background: rgba(255, 255, 255, 0.92);
  }
}
/**************** 深度交互反馈 ****************/
.message-content:active {
  transform: scale(0.98);
  transition-duration: 0.15s;
}

.message-body a {
  color: var(--ios-blue);
  text-decoration: underline;
  text-decoration-color: rgba(0, 122, 255, 0.3);
  transition: all 0.2s ease;
}

.message-body a:hover {
  text-decoration-color: currentColor;
}


.toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 12px 24px;
  border-radius: 8px;
  color: white;
  z-index: 1000;
}

.info { background: #007AFF; }
.warning { background: #FF9500; }
.error { background: #FF3B30; }

@keyframes slideIn {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes slideOut {
  from { transform: translateX(0); }
  to { transform: translateX(100%); }
}// 修改后的 DOMContentLoaded 事件处理
document.addEventListener("DOMContentLoaded", () => {
  loadConversationsFromStorage();
  
  if (conversations.length === 0) {
    showEmptyChatPrompt();
  } else {
    const lastConversation = conversations[conversations.length - 1];
    if (lastConversation) {
      currentConversationId = lastConversation.id; // 显式赋值
      loadConversation(lastConversation.id);
    }
  }
});
// 动态标题切换逻辑
const dynamicTitle = document.getElementById("dynamic-title");

// 定义标题切换的内容
const titles = [
  "UNHub & Qwen MAX",
  "开创智能交互新纪元"
];

// 定义图片路径数组
const logoImages = [
  "zyhgov.png",
  "wisdom_heng.png",
  "deepseek r1.svg", // 替换为你的其他图片路径
];

// 获取图片元素
const zhuLogo = document.getElementById("zhu_logo");

let currentImageIndex = 0; // 当前显示的图片索引

// 更新图片内容的函数
function updateLogo() {
  currentImageIndex = (currentImageIndex + 1) % logoImages.length; // 循环切换到下一张图片
  zhuLogo.src = logoImages[currentImageIndex]; // 更新图片路径
}

// 每隔 3 秒切换一次图片
setInterval(updateLogo, 3000);

let currentIndex = 0; // 当前显示的标题索引

// 更新标题内容的函数
function updateTitle() {
  // 先让当前标题淡出
  dynamicTitle.classList.remove("visible");
  
  // 等待淡出动画完成后再更新内容并淡入
  setTimeout(() => {
    dynamicTitle.textContent = titles[currentIndex];
    currentIndex = (currentIndex + 1) % titles.length; // 循环切换到下一个标题
    
    // 让新标题淡入
    setTimeout(() => {
      dynamicTitle.classList.add("visible");
    }, 50); // 短暂延迟以确保淡出完成
  }, 500); // 等待淡出动画完成
}

// 初始显示第一个标题
dynamicTitle.textContent = titles[0];
dynamicTitle.classList.add("visible");

// 每隔 3 秒切换一次标题
setInterval(updateTitle, 3000);
// 折叠侧边栏功能
const sidebar = document.getElementById("sidebar");
const toggleSidebarButton = document.getElementById("toggle-sidebar");
const sidebarToggleIcon = document.getElementById("sidebar-toggle-icon");
let isSidebarCollapsed = false; // 标记侧边栏是否已折叠

toggleSidebarButton.addEventListener("click", () => {
  if (isSidebarCollapsed) {
    // 展开侧边栏
    sidebar.classList.remove("w-25"); // 从最小宽度恢复到正常宽度
    sidebar.classList.add("w-64");
    sidebarToggleIcon.src = "收起侧边栏.svg"; // 切换为“收起”图标
    isSidebarCollapsed = false;
  } else {
    // 收缩侧边栏
    sidebar.classList.remove("w-64");
    sidebar.classList.add("w-25"); // 设置最小宽度
    sidebarToggleIcon.src = "收起侧边栏.svg"; // 切换为“展开”图标
    isSidebarCollapsed = true;
  }
});
toggleSidebarButton.addEventListener("click", () => {
  if (isSidebarCollapsed) {
    // 展开侧边栏
    sidebar.classList.remove("w-20");
    sidebar.classList.add("sm:w-64");
    isSidebarCollapsed = false;
  } else {
    // 收缩侧边栏
    sidebar.classList.remove("sm:w-64");
    sidebar.classList.add("w-20");
    isSidebarCollapsed = true;
  }
});
// 获取按钮元素
const goHomeButton = document.getElementById("go-home");

// 绑定点击事件
goHomeButton.addEventListener("click", () => {
  // 在新标签页中跳转到 /index.html
  window.open("/index.html", "_blank");
});
// 全局变量
let currentConversationId = null; // 当前对话 ID
let conversations = []; // 存储所有对话

// 获取 DOM 元素
const chatBox = document.getElementById("chat-box");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");
const newConversationBtn = document.getElementById("new-conversation");
const conversationList = document.getElementById("conversations");
const welcomeArea = document.getElementById("welcome-area");
const STORAGE_KEY = "wisdom_conversations_v2"; // 所有存储操作使用此常量
// 添加消息到聊天框
// 增强的 addMessage 函数
// 修改后的 addMessage 函数
// 修正后的addMessage函数
function addMessage(role, content) {
  const messageDiv = document.createElement("div");
  messageDiv.className = `message ${role}`; // 确保类名正确拼接
  
  const styleConfig = {
    user: { label: "您的问题" },
    bot: { label: "思考结果" },
    thinking: { label: "思考过程" }
  };

  // 强制使用标准消息结构
  messageDiv.innerHTML = `
    <div class="message-content">
      <div class="message-header">${styleConfig[role].label}</div>
      ${role === 'thinking' ? '<div class="thinking-status">深度思考内容</div>' : ''}
      <div class="message-body">${marked.parse(content)}</div>
    </div>
  `;

  chatBox.appendChild(messageDiv);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// 修改后的 showLoading 函数
function showLoading() {
  const loadingBubble = document.createElement("div");
  loadingBubble.classList.add("message", "thinking");
  
  // 严格遵循消息结构
  loadingBubble.innerHTML = `
    <div class="message-content">
      <div class="message-header">思考过程</div>
      <div class="thinking-status">
        深度思考中
        <div class="three-body">
          <div class="three-body__dot"></div>
          <div class="three-body__dot"></div>
          <div class="three-body__dot"></div>
        </div>
      </div>
    </div>
  `;
  
  chatBox.appendChild(loadingBubble);
  chatBox.scrollTop = chatBox.scrollHeight;
  return loadingBubble;
}

// 隐藏加载提示
function hideLoading(loadingBubble) {
  chatBox.removeChild(loadingBubble);
}

// 隐藏欢迎区域
function hideWelcomeArea() {
  welcomeArea.style.display = "none";
}
const controller = new AbortController();
setTimeout(() => controller.abort(), 30000); // 30秒超时
// 修改后的 sendMessageToAI 函数
// 修改后的 sendMessageToAI 函数
async function sendMessageToAI(userMessage) {
  try {
    const loadingBubble = showLoading();
    const response = await fetch("https://dashscope.aliyuncs.com/compatible-mode/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer sk-db00bb55194e4cf483aaf0c4b1d50a2a`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "deepseek-r1",
        messages: [{ role: "user", content: userMessage }],
        stream: true
      })
    });

    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

    let thinkingContent = "";
    let finalContent = "";

    // 关键修复：正确创建消息容器
    const thinkingDiv = createMessageContainer("thinking");
    const answerDiv = createMessageContainer("bot");

    const reader = response.body.getReader();
    const decoder = new TextDecoder();

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;
      const chunk = decoder.decode(value);
      const lines = chunk.split('\n').filter(line => line.trim() !== '');

      for (const line of lines) {
        if (!line.startsWith('data:')) continue;
        const jsonStr = line.slice(5).trim();
        if (jsonStr === '[DONE]') continue;

        const data = JSON.parse(jsonStr);
        const delta = data.choices[0].delta;

        // 动态更新内容
        if (delta.reasoning_content) {
          thinkingContent += delta.reasoning_content;
          updateMessageContent(thinkingDiv, thinkingContent);
        }
        if (delta.content) {
          finalContent += delta.content;
          updateMessageContent(answerDiv, finalContent);
        }
      }
    }

    hideLoading(loadingBubble);
    saveMessage(currentConversationId, "user", userMessage);
    saveMessage(currentConversationId, "bot", finalContent);
    saveMessage(currentConversationId, "thinking", thinkingContent);
    saveConversationsToStorage();
  } catch (error) {
    console.error("Error:", error);
    hideLoading(loadingBubble);
    addMessage("bot", `请求出错：${error.message}`);
  }
}
// 辅助函数：创建消息容器
function createMessageContainer(role) {
  const div = document.createElement("div");
  div.classList.add("message", role);
  chatBox.appendChild(div);
  return div;
}

// 辅助函数：逐字更新内容
function updateMessageContent(container, text) {
  container.innerHTML = marked.parse(text);
  chatBox.scrollTop = chatBox.scrollHeight; // 自动滚动
}
function smoothAppend(text, container) {
  let index = 0;
  const animate = () => {
    if (index < text.length) {
      container.innerHTML = marked.parse(text.slice(0, index));
      index++;
      requestAnimationFrame(animate);
    }
  };
  requestAnimationFrame(animate);
}
const fragment = document.createDocumentFragment();
//...更新操作
chatBox.appendChild(fragment);
// 获取“一键清除缓存并重置”按钮
const clearCacheButton = document.getElementById("clear-cache");

// 绑定点击事件
clearCacheButton.addEventListener("click", () => {
  const confirmed = confirm("确定要清除所有缓存并重置到初始状态吗？");
  if (confirmed) {
    // 清除 localStorage 中的数据
    localStorage.removeItem(STORAGE_KEY);

    // 刷新页面以恢复到初始状态
    location.reload();
  }
});
// 显示“没有对话”的提示内容
function showEmptyChatPrompt() {
  chatBox.innerHTML = `
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center text-3xl">
      <img src="deepseek r1.svg" alt="Logo" class="w-100 h-20 mx-auto mb-4">
      <p>您还没有任何对话。</p>
      <p>请点击<span style="color: #007AFF;">“♾️ 开启新对话”</span>开始。</p>
    </div>
  `;
}
// 发送按钮点击事件
sendBtn.addEventListener("click", () => {
  const userMessage = userInput.value.trim();
  if (userMessage === "") return;

  // 隐藏欢迎区域
  hideWelcomeArea();

  // 显示用户消息
  addMessage("user", userMessage);
  saveMessage(currentConversationId, "user", userMessage);

  // 如果是新对话，设置标题
  if (!currentConversationId) {
    startNewConversation(userMessage);
  }

  // 清空输入框
  userInput.value = "";

  // 发送消息给 AI
  sendMessageToAI(userMessage);
});

// 示例问题点击事件
document.querySelectorAll(".example-question").forEach((button) => {
  button.addEventListener("click", () => {
    const question = button.textContent.trim(); // 获取示例问题文本
    userInput.value = question; // 填充输入框
    sendBtn.click(); // 触发发送操作
  });
});

// 按下回车键发送消息
userInput.addEventListener("keydown", (event) => {
  if (event.key === "Enter" && !event.shiftKey) {
    event.preventDefault(); // 防止换行
    sendBtn.click();
  }
});


// 保存对话列表到 localStorage
function saveConversationsToStorage() {
  if (Array.isArray(conversations)) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(conversations));
  } else {
    console.error("Invalid conversations data. Cannot save to localStorage.");
  }
}
// 从 localStorage 加载对话列表
// 从 localStorage 加载对话列表
function loadConversationsFromStorage() {
  const storedConversations = localStorage.getItem(STORAGE_KEY);
  if (storedConversations) {
    try {
      conversations = JSON.parse(storedConversations).filter(conv => {
        return conv.messages.every(msg => msg.content.trim() !== ""); // 过滤空内容
      });
      if (!Array.isArray(conversations)) conversations = [];
    } catch (error) {
      conversations = [];
    }
  } else {
    conversations = [];
  }
  updateConversationList();
}
// 新建对话
// 新建对话
function startNewConversation(title) {
  const conversationId = Date.now(); // 使用时间戳作为唯一 ID
  currentConversationId = conversationId;

  // 创建新的对话对象
  const newConversation = {
    id: conversationId,
    title: title || "新对话",
    messages: []
  };

  if (!Array.isArray(conversations)) {
    console.error("Conversations is not an array. Resetting to empty array.");
    conversations = [];
  }

  conversations.push(newConversation);
  saveConversationsToStorage(); // 保存到 localStorage
  updateConversationList(); // 更新对话列表

  // 清空聊天窗口并隐藏提示内容
  chatBox.innerHTML = "";
  welcomeArea.style.display = "none"; // 隐藏欢迎区域
}
// 更新对话列表
// 更新对话列表
function updateConversationList() {
  const conversationList = document.getElementById("conversations");
  conversationList.innerHTML = ""; // 清空现有列表

  if (conversations.length === 0) {
    // 如果对话列表为空，显示提示内容
    showEmptyChatPrompt();
    return;
  }

  conversations.forEach((conversation) => {
    const li = document.createElement("li");
    li.classList.add(
      "flex",
      "items-center",
      "justify-between",
      "p-2",
      "rounded-md",
      "hover:bg-gray-100",
      "cursor-pointer",
      "text-sm"
    );

    // 对话标题
    const titleSpan = document.createElement("span");
    titleSpan.textContent = conversation.title;
    titleSpan.classList.add("flex-grow");

    // 截断标题逻辑
    const maxTitleLength = 10; // 最大字符数（包括中文和英文）
    const originalTitle = conversation.title;

    // 判断是否需要截断
    if (originalTitle.length > maxTitleLength) {
      titleSpan.textContent = originalTitle.slice(0, maxTitleLength) + "...";
      titleSpan.title = originalTitle; // 设置完整标题为 tooltip 提示
    } else {
      titleSpan.textContent = originalTitle;
    }

    // 修改标题按钮
    const editButton = document.createElement("button");
    editButton.innerHTML = '<img src="edit.svg" alt="Edit" class="w-4 h-4">';
    editButton.classList.add("ml-2", "text-gray-500", "hover:text-gray-700");
    editButton.addEventListener("click", () => editConversationTitle(conversation.id));

    // 删除按钮
    const deleteButton = document.createElement("button");
    deleteButton.innerHTML = '<img src="delete.svg" alt="Delete" class="w-4 h-4">';
    deleteButton.classList.add("ml-2", "text-red-500", "hover:text-red-700");
    deleteButton.addEventListener("click", () => deleteConversation(conversation.id));

    // 将元素添加到列表项
    li.appendChild(titleSpan);
    li.appendChild(editButton);
    li.appendChild(deleteButton);

    // 点击列表项加载对话
    li.addEventListener("click", () => loadConversation(conversation.id));

    conversationList.appendChild(li);
  });
}
// 修改对话标题
function editConversationTitle(conversationId) {
  const newTitle = prompt("请输入新的对话标题：");
  if (newTitle && newTitle.trim() !== "") {
    const conversation = conversations.find((conv) => conv.id === conversationId);
    if (conversation) {
      conversation.title = newTitle.trim();
      saveConversationsToStorage(); // 保存到 localStorage
      updateConversationList(); // 更新对话列表
    }
  }
}
// 删除对话
function deleteConversation(conversationId) {
  const confirmed = confirm("确定要删除此对话吗？");
  if (confirmed) {
    conversations = conversations.filter((conv) => conv.id !== conversationId);
    saveConversationsToStorage(); // 保存到 localStorage
    updateConversationList(); // 更新对话列表

    // 如果删除的是当前对话，清空聊天窗口并显示欢迎区域
    if (currentConversationId === conversationId) {
      currentConversationId = null;
      chatBox.innerHTML = "";
      welcomeArea.style.display = "block";
    }

    // 检查对话列表是否为空
    if (conversations.length === 0) {
      showEmptyChatPrompt();
    }
  }
}
// 加载指定对话
// 加载指定对话
function loadConversation(conversationId) {
  const conversation = conversations.find(conv => conv.id === conversationId);
  if (!conversation) {
    showEmptyChatPrompt(); // 未找到对话时显示提示
    return;
  }
  
  currentConversationId = conversationId;
  chatBox.innerHTML = "";
  
  // 去重并渲染消息
  const uniqueMessages = [];
  const seenUserMessages = new Set();
  
  conversation.messages.forEach(msg => {
    if (msg.role === "user") {
      if (!seenUserMessages.has(msg.content)) {
        seenUserMessages.add(msg.content);
        uniqueMessages.push(msg);
      }
    } else {
      uniqueMessages.push(msg);
    }
  });
  
  uniqueMessages.forEach(msg => addMessage(msg.role, msg.content));
  hideWelcomeArea();
}
function saveMessage(conversationId, role, content) {
  const conversation = conversations.find(conv => conv.id === conversationId);
  if (conversation) {
    const newMessage = { role, content, timestamp: Date.now() };
    
    if (["bot", "thinking"].includes(role)) {
      const lastMsg = conversation.messages[conversation.messages.length - 1];
      if (lastMsg && lastMsg.role === role) {
        lastMsg.content = content; // 覆盖最后一条同类型消息
      } else {
        conversation.messages.push(newMessage);
      }
    } else {
      conversation.messages.push(newMessage);
    }
    saveConversationsToStorage();
  }
}

// 点击新建对话按钮
newConversationBtn.addEventListener("click", () => {
  startNewConversation();
});

// 自定义 marked.js 渲染器
const renderer = new marked.Renderer();

// 自定义代码块渲染
renderer.code = function (code, language) {
  return `
    <pre class="bg-gray-900 text-white p-4 rounded-lg overflow-auto">
      <code class="language-${language}">
        ${code}
      </code>
    </pre>
  `;
};

// 自定义公式渲染（假设使用 KaTeX 或 MathJax）
renderer.html = function (html) {
  // 如果是公式内容，添加专门的样式
  if (html.includes("$$")) {
    return `<div class="formula bg-gray-100 p-3 rounded-lg text-center">${html}</div>`;
  }
  return html;
};

// 使用自定义渲染器
marked.setOptions({
  renderer: renderer,
  gfm: true, // 启用 GitHub Flavored Markdown
  breaks: true, // 支持换行
});